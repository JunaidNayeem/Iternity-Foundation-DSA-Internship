// implement of quick sort
#include<bits/stdc++.h>
using namespace std;

int partition(int arr[],int l,int r){
    int pivot = arr[r];
    int i = l-1;
    for(int j=l; j<r; j++){
        if(arr[j]<pivot){
            i++;
            swap(arr[i], arr[j]);
        }
    }
        swap(arr[i+1], arr[r]);
        return i+1;
}

void quickSort(int arr[], int l, int r){
    if(l<r){
        int pi = partition(arr, l, r);
        quickSort(arr, l, pi-1);
        quickSort(arr, pi+1, r);
    }
}

int main(){
    int n;
    cin>>n;
    int arr[n];
    
    for(auto &n:arr){
        cin>>n;
    }

    quickSort(arr,0,n);

    for(auto a:arr){
        cout<<a<<" ";
    }
    return 0;
}



// implementation of merge Sort

#include<bits/stdc++.h>
using namespace std;

void merge(int arr[], int l, int mid, int r)
{
    int n1= mid-l+1;
    int n2 = r-mid;

    int a[n1];
    int b[n2];

    for(int i=0; i<n1; i++){
        a[i] = arr[i+l];
    }

    for(int i=0; i<n2; i++){
        b[i] = arr[mid+1+i];
    }
    int i=0;
    int j=0;
    int k=l;

    while(i<n1 && j<n2){
        if(a[i]<b[j]){
            arr[k]=a[i];
            k++;
            i++;
        }
        else{
            arr[k]=b[j];
            k++;
            j++;
        }
    }
    while(i<n1){
        arr[k]=a[i];
        k++;
        i++;
    }
    while(j<n2){
        arr[k]=b[j];
        k++;
        j++;
    }

}

void mergeSort(int arr[],int l,int r){
    if(l<r){
        int mid=(l+r)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr,l,mid,r);
    }
}
int main(){
    int n;
    cin>>n;
    int arr[n];


    for(auto &a:arr){
        cin>>a;
    }

    mergeSort(arr,0,n-1);

    for(auto v:arr){
        cout<<v<<" ";
    }
    
    return 0;

}



//Implementation of Count Inversion Sort

#include<bits/stdc++.h>
using namespace std;
#define ll long long int

ll merge(int arr[], int l, int mid, int r){
    ll inv = 0;
    int n1 = mid-l+1;
    int n2 = r-mid;
    int a[n1];
    int b[n2];
    
    for(int i=0; i<n1; i++){
        a[i]=arr[i+l];
    }
    for(int i=0; i<n2; i++){
        b[i]=arr[i+mid+1];
    }
    int i=0;
    int j=0;
    int k=l;

    while(i<n1 and i<n2)
    {
        if(a[i]<=b[j]){
            arr[k]=a[i];
            k++;
            i++;
        }
        else{
            arr[k]=b[j];
            inv+=n1-i;
            k++;
            j++;
        }
    }
    while(i<n1){
        arr[k]=a[i];
        k++;
        i++;
    }
    while(j<n2){
        arr[k]=b[j];
        k++;
        j++;
    }
    return inv;
}

ll mergeSort(int arr[],int l, int r){
    ll inv=0;
    if(l<r){
        int mid=(l+r)/2;
        inv+=mergeSort(arr,l,mid);
        inv+=mergeSort(arr,mid+1,r);
        inv+=merge(arr,l, mid,r);
    }
    return inv;
}

int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<mergeSort(arr,0,n-1)<<endl;

    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    
    return 0;
}


//Intersection of linked list

#include<bits/stdc++.h>
using namespace std;

class node{
    public:
        int data;
        node *next;
    
    node(int val){
        data = val;
        next = NULL;
    }
};
void insert(node * &head, int val){
    node *n=new node(val);
    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

int countNode(node *head){
    int c=0;
    while(head != NULL){
        c++;
        head=head->next;
    }
    return c;
}
 
int insectionPoint(node *head1, node *head2){
    int l1 = countNode(head1);
    int l2 = countNode(head2);
    node *temp1 = head1;
    node *temp2 = head2;

    if(l1>l2){
        for(int i=0;i<l1-l2;i++){
            temp1 = temp1->next;
            }
    }
    if(l2>l1){
    for(int i=0;i<l2-l1;i++){
        temp2 = temp2->next;
        }
    }

    while(temp1!=NULL and temp2!=NULL){
        if(temp1==temp2){
            return temp1->data;
        }
        temp1=temp1->next;
        temp2=temp2->next;
    }
    return -1;
}

void display(node *head){
    node *temp=head;

    while(temp != NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<endl;
}
int main(){
    node *head1 = NULL;
    node *head2 = NULL;
    node *newNode;
    insert(head1, 0);
    insert(head1, 1);
    insert(head2, 2);
    insert(head1, 3);
    insert(head2, 4);
    head2->next->next=head1;
    insert(head1, 5);
    insert(head1, 11);
    insert(head1, 6);
    insert(head1, 7);
    insert(head1, 8);
    insert(head1, 9);

    display(head2);
    display(head1);

    cout<<"Point of Intersection : "<<insectionPoint(head1,head2);

    return 0;

}


//find the length of linked list
#include<bits/stdc++.h>
using namespace std;

class node{
    public:
        int data;
        node *next;

        node(int val){
            data=val;
            next=NULL;
        }
};

void insert(node * &head, int val){
    node *n=new node(val);

    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

void display(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

int countNode(node *head){
    int count=0;
    node *temp=head;
    while (temp!=NULL)
    {
        count++;
        temp= temp->next;
    }
    return count;
}

int main(){
    int val;
    node *head=NULL;
    bool flag=1,p;
    while(flag){
        cout<<"Press 1 to insert a Node else Press 0 :";
        cin>>p;
        if(p==1){
            cout<<"Enter the value in Node :";
            cin>>val;
            insert(head, val); 
        }
        else{
            break;
        }
    }
    display(head);
    cout<<"length of Linked List: "<<countNode(head);
}


//check whether the given linked list is palindrome or not.

#include<bits/stdc++.h>
using namespace std;

class node{
    public:
        int data;
        node *next;

        node(int val){
            data=val;
            next=NULL;
        }
};

void insert(node * &head, int val){
    node *n=new node(val);

    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

void checkPalindrome(node *head){
    stack<int> s;
    bool flag=true;
    node *temp=head;
    while(temp!=NULL){
        s.push(temp->data);
        temp=temp->next;
    }

    while(head!=NULL){
        int ele=s.top();
        s.pop();
        //cout<<"top:"<<ele<<"   node:"<<temp->data<<endl;
        if(ele != head->data){
            flag=false;
            break;
        }
        head = head->next;
    }

    if(flag == true){
        cout<<"The Given Linkedlist is Palindrome "<<endl;
    }
    else{
        cout<<"The Given Linkedlist is Not Palindrome "<<endl;
    }
}

void display(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

int main(){
    int val;
    node *head=NULL;
    bool flag=1,p;
    while(flag){
        cout<<"Press 1 to insert a Node else Press 0 :";
        cin>>p;
        if(p==1){
            cout<<"Enter the value in Node :";
            cin>>val;
            insert(head, val); 
        }
        else{
            break;
        }
    }
    display(head);
    checkPalindrome(head);
    return 0;
}


//Sort a linkedlist
#include <bits/stdc++.h> 
using namespace std; 

class node { 
public: 
	int data; 
	node* next;
	node(int val){
            data=val;
            next=NULL;
        } 
}; 

void insert(node * &head, int val){
    node *n=new node(val);

    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

void display(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

node* MergeSortedList(node* lst1, node* lst2) 
{ 
	node* result = NULL; 

	// Base Cases
	if (lst1 == NULL) 
		return (lst2); 
	else if (lst2 == NULL) 
		return (lst1); 

	// recursively merging two lists
	if (lst1->data <= lst2->data) { 
		result = lst1; 
		result->next = MergeSortedList(lst1->next, lst2); 
	} 
	else { 
		result = lst2; 
		result->next = MergeSortedList(lst1, lst2->next); 
	} 
	return result; 
} 

void SplitList(node* source, node** front, node** back) 
{ 
	node* ptr1; 
	node* ptr2; 
	ptr2 = source; 
	ptr1 = source->next; 


	while (ptr1 != NULL) { 
		ptr1 = ptr1->next; 
		if (ptr1 != NULL) { 
			ptr2 = ptr2->next; 
			ptr1 = ptr1->next; 
		} 
	} 

	*front = source; 
	*back = ptr2->next; 
	ptr2->next = NULL; 
} 


void MergeSort(node** thead) 
{ 
	node* head = *thead; 
	node* ptr1; 
	node* ptr2; 

  // Base Case
	if ((head == NULL) || (head->next == NULL)) { 
		return; 
	} 

	// Splitting list
	SplitList(head, &ptr1, &ptr2); 

	// Recursively sorting two lists.
	MergeSort(&ptr1); 
	MergeSort(&ptr2); 

	// Sorted List.
	*thead = MergeSortedList(ptr1, ptr2); 
} 

// Driver Program.
int main() 
{ 
	int val;
  	node *head=NULL;
		bool flag=1,p;
		while(flag){
			cout<<"Press 1 to insert a Node else Press 0 :";
			cin>>p;
			if(p==1){
				cout<<"Enter the value in Node :";
				cin>>val;
				insert(head, val); 
			}
			else{
				break;
			}
		}
    
	cout << "Unsorted Linked List: "; 
	display(head);  
	MergeSort(&head); 
	cout << "Sorted Linked List: "; 
	display(head); 

	return 0; 
} 



// Reverse the linked list
#include<bits/stdc++.h>
using namespace std;

class node{
    public:
        int data;
        node *next;

        node(int val){
            data=val;
            next=NULL;
        }
};

void insert(node * &head, int val){
    node *n=new node(val);

    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

void display(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

node *reverseLinkedlist(node *head){
    node *nextPtr;
    node *currPtr = head;
    node *prevPtr = NULL;

    while(currPtr!=NULL){
        nextPtr = currPtr->next;
        currPtr->next = prevPtr;

        prevPtr = currPtr;
        currPtr = nextPtr;
    }

    return prevPtr;
}
int main(){
    int val;
    node *head=NULL;
    bool flag=1,p;
    while(flag){
        cout<<"Press 1 to insert a Node else Press 0 :";
        cin>>p;
        if(p==1){
            cout<<"Enter the value in Node :";
            cin>>val;
            insert(head, val); 
        }
        else{
            break;
        }
    }
    display(head);
    cout<<"Reversed Linked List :"<<endl;
    node *revHead = reverseLinkedlist(head);
    display(revHead);
    return 0;
}



//deleting a node from link list
#include<bits/stdc++.h>
using namespace std;

class node{
    public:
        int data;
        node *next;

        node(int val){
            data=val;
            next=NULL;
        }
};

void insert(node * &head, int val){
    node *n=new node(val);

    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

void display(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

node* deletion(node *head, int val){
    node *temp=head;
    if(head==NULL){
        return NULL;
    }

    if(temp->next == NULL || temp->data==val){
        node* todelete=temp;
        head=head->next;
        delete todelete;
        return head;
    }

    while (temp->next->data != val)
    {
        temp=temp->next;
    }

    node* todelete=temp->next;
    temp->next=temp->next->next;

    delete todelete;
    return head;
}
int main(){
    int val;
    node *head=NULL;
    bool flag=1,p;
    while(flag){
        cout<<"Press 1 to insert a Node else Press 0 :";
        cin>>p;
        if(p==1){
            cout<<"Enter the value in Node :";
            cin>>val;
            insert(head, val); 
        }
        else{
            flag=0;
        }
    }
    display(head);
    cout<<"Enter the node you want to delete : ";
    cin>>val;
    head=deletion(head, val);
    cout<<"Linked list after Deletion of specific node: ";
    display(head);

    return 0;
}


#include<bits/stdc++.h>
using namespace std;

class node{
    public:
        int data;
        node *next;

        node(int val){
            data=val;
            next=NULL;
        }
};

void insert(node * &head, int val){
    node *n=new node(val);

    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

void display(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

node* deletion(node *head, int val){
    node *temp=head;
    if(head==NULL){
        return NULL;
    }

    if(temp->next == NULL || temp->data==val){
        node* todelete=temp;
        head=head->next;
        delete todelete;
        return head;
    }

    while (temp->next->data != val)
    {
        temp=temp->next;
    }

    node* todelete=temp->next;
    temp->next=temp->next->next;

    delete todelete;
    return head;
}
int main(){
    int val;
    node *head=NULL;
    bool flag=1,p;
    while(flag){
        cout<<"Press 1 to insert a Node else Press 0 :";
        cin>>p;
        if(p==1){
            cout<<"Enter the value in Node :";
            cin>>val;
            insert(head, val); 
        }
        else{
            flag=0;
        }
    }
    display(head);
    cout<<"Enter the node you want to delete : ";
    cin>>val;
    head=deletion(head, val);
    cout<<"Linked list after Deletion of specific node: ";
    display(head);

    return 0;
}



//deleting a node of given pointer
#include<bits/stdc++.h>
using namespace std;

class node{
    public:
        int data;
        node *next;

        node(int val){
            data=val;
            next=NULL;
        }
};

void insert(node * &head, int val){
    node *n=new node(val);

    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

void display(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

node* deletion(node *head, int val){
    node *temp=head;
    if(head==NULL){
        return NULL;
    }

    if(temp->next == NULL || temp->data==val){
        node* todelete=temp;
        head=head->next;
        delete todelete;
        return head;
    }

    while (temp->next->data != val)
    {
        temp=temp->next;
    }

    node* todelete=temp->next;
    temp->next=temp->next->next;

    delete todelete;
    return head;
}
int main(){
    int val;
    node *head=NULL;
    bool flag=1,p;
    while(flag){
        cout<<"Press 1 to insert a Node else Press 0 :";
        cin>>p;
        if(p==1){
            cout<<"Enter the value in Node :";
            cin>>val;
            insert(head, val); 
        }
        else{
            flag=0;
        }
    }
    display(head);
    cout<<"Enter the node you want to delete : ";
    cin>>val;
    head=deletion(head, val);
    cout<<"Linked list after Deletion of specific node: ";
    display(head);

    return 0;
}


//Reverse a linked list in the group of k
#include <bits/stdc++.h> 
using namespace std; 

class node { 
public: 
	int data; 
	node* next;
	node(int val){
            data=val;
            next=NULL;
        } 
}; 

void insert(node * &head, int val){
    node *n=new node(val);

    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

void display(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

node* reverseK(node * &head, int k){
    node *prevPtr=NULL;
    node *currPtr=head;
    node *nextPtr;

    int count=0;
    while(currPtr!=NULL && count<k){
        nextPtr=currPtr->next;
        currPtr->next=prevPtr;
        prevPtr=currPtr;
        currPtr=nextPtr;
        count++;
    }
    if(nextPtr!=NULL){
    head->next=reverseK(nextPtr, k);
    }

    return prevPtr;
}
int main(){
    int val;
    node *head=NULL;
    bool flag=1,p;
    while(flag){
        cout<<"Press 1 to insert a Node else Press 0 :";
        cin>>p;
        if(p==1){
            cout<<"Enter the value in Node :";
            cin>>val;
            insert(head, val); 
        }
        else{
            break;
        }
    }
    display(head);
    cout<<"Enter the value of K : ";
    cin>>val;
    cout<<"Linked List reversed in group of K :"<<endl;
    node *revHead = reverseK(head,val);
    display(revHead);
    return 0;
}




//given a linked list arrange it in the below fashion
//	L0->Ln-1->L1->Ln-2->L2->Ln-3->null;
#include<bits/stdc++.h>
using namespace std;
class node{
    public:
        int data;
        node* next;
        node(int val){
            data=val;
            next=NULL;
    }
};
//insert Function
void insert(node * &head, int val){
    node *n=new node(val);

    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}
//count the LinkedList
int countNode(node *head){
    int c=0;
    while(head != NULL){
        c++;
        head=head->next;
    }
    return c;
}
//display function
void display(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}
//reverse the list
node *reverseLinkedlist(node *head){
    node *nextPtr;
    node *currPtr = head;
    node *prevPtr = NULL;

    while(currPtr!=NULL){
        nextPtr = currPtr->next;
        currPtr->next = prevPtr;

        prevPtr = currPtr;
        currPtr = nextPtr;
    }

    return prevPtr;
}
//merge the to list
node *mergeList(node *head1, node *head2,int i){
    node *result;
    if(head1==NULL)
        return head2;
    if(head2==NULL)
        return head1;
    if(i==1){
        result=head1;
        result->next=mergeList(head1->next,head2,0);
    }
    else{   
        result=head2;
        result->next=mergeList(head1,head2->next,1);
    }
    return result;
}
//to split the list and return
node *split(node *head){
    node *walker=head;
    node *runner=head->next;

    while(runner!=NULL){
        runner=runner->next;
        if(runner==NULL){
            break;
        }
        walker=walker->next;
        runner=runner->next;
    }

    node *halfList1=head;
    node *halfList2=walker->next;
    walker->next=NULL;
    node *revHalf = reverseLinkedlist(halfList2);
    node *newList=mergeList(halfList1,revHalf,1);
    return newList;

}


//main Function
int main(){
    node *head=NULL;
    insert(head,1);
    insert(head,2);
    insert(head,3);
    insert(head,4);
    insert(head,5);
    insert(head,6);
    display(head);
    node *newNode=split(head);
    display(newNode);
    return 0;
}



//merge two sorted linked list
#include <bits/stdc++.h> 
using namespace std; 

class node { 
public: 
	int data; 
	node* next;
	node(int val){
            data=val;
            next=NULL;
        } 
}; 

void insert(node * &head, int val){
    node *n=new node(val);

    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

void display(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

node *mergeSorted(node *head1, node *head2){
    node *head3=new node(-1);
    node *ptr1=head1;
    node *ptr2=head2;
    node *ptr3=head3;

    while(ptr1!=NULL and ptr2!=NULL){
        if(ptr1->data<ptr2->data){
            ptr3->next=ptr1;
            ptr1=ptr1->next;
        }
        else
        {
            ptr3->next=ptr2;
            ptr2=ptr2->next;
        }
        ptr3=ptr3->next;
    }
    while(ptr1!=NULL){
        ptr3->next=ptr1;
        ptr1=ptr1->next;
        ptr3=ptr3->next;
    }
    while(ptr2!=NULL){
        ptr3->next=ptr2;
        ptr2=ptr2->next;
        ptr3=ptr3->next;
    }

    return head3->next;
}

node *mergeRecursive(node *head1, node *head2){
    node *mergedList;
    if(head1==NULL)
    {
       return head2;
    }
    if(head2==NULL){
        return head1;
    }
        if(head1->data<head2->data){
            mergedList=head1;
            mergedList->next=mergeRecursive(head1->next,head2);
        }
        else{
            mergedList=head2;
            mergedList->next=mergeRecursive(head1,head2->next);
        }
        return mergedList;
}

int main(){
    node *head1=NULL;
    node *head2=NULL;
    insert(head1,1);
    insert(head1,4);
    insert(head1,5);
    insert(head1,7);
    insert(head2,2);
    insert(head2,3);
    insert(head2,6);
    display(head1);
    display(head2);
    node *newNode=mergeRecursive(head1,head2);
    display(newNode);
    return 0;
}



//merge linkedlist alternatively
#include <bits/stdc++.h> 
using namespace std; 

class node { 
public: 
	int data; 
	node* next;
	node(int val){
            data=val;
            next=NULL;
        } 
}; 

void insert(node * &head, int val){
    node *n=new node(val);

    if(head==NULL){
        head=n;
        return;
    }
    node *temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

void display(node *head){
    node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}
node *mergeRecursive(node *head1, node *head2,int i){
    node *mergedList;
    if(head1==NULL)
    {
       return head2;
    }
    if(head2==NULL){
        return head1;
    }
    ;
    if(i==1){
        mergedList=head1;
        mergedList->next=mergeRecursive(head1->next,head2,0);
    }
    else{   
        mergedList=head2;
        mergedList->next=mergeRecursive(head1,head2->next,1);
    }
                                        
        return mergedList;
}

int main(){
    node *head1=NULL;
    node *head2=NULL;
    insert(head1,1);
    insert(head1,4);
    insert(head1,5);
    insert(head1,7);
    insert(head2,2);
    insert(head2,3);
    insert(head2,6);
    display(head1);
    display(head2);
    node *newNode=mergeRecursive(head1,head2,1);
    display(newNode);
    return 0;
}
